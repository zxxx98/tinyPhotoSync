name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/tinyphotosync

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'


      - name: Install dependencies
        run: |
          npm install
          cd client && npm install
          cd ../server && npm install

      # ESLint 检查已禁用
      # - name: Run linting
      #   run: |
      #     # 客户端代码检查
      #     cd client
      #     echo "🔍 开始客户端代码检查..."
      #     npm run lint 2>&1 || echo "⚠️ 客户端代码检查未配置或失败"
      #     
      #     # 服务端代码检查
      #     cd ../server
      #     echo "🔍 开始服务端代码检查..."
      #     npm run lint 2>&1 || echo "⚠️ 服务端代码检查未配置或失败"

      - name: Run tests
        run: |
          # 客户端测试
          cd client
          echo "🧪 开始客户端测试..."
          npm test -- --coverage --watchAll=false 2>&1 || echo "⚠️ 客户端测试未配置或失败"
          
          # 服务端测试
          cd ../server
          echo "🧪 开始服务端测试..."
          npm test -- --coverage 2>&1 || echo "⚠️ 服务端测试未配置或失败"

      - name: Build client
        run: |
          cd client
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/build/

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [quality-check]
    if: github.ref == 'refs/heads/main'
    environment: production
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push prod image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=PhotoSync
            org.opencontainers.image.description=PhotoSync 生产环境镜像
            org.opencontainers.image.version=latest
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Deploy to production
        run: |
          echo "🚀 部署到生产环境"
          echo "📦 镜像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # 这里可以添加实际的部署逻辑

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: [quality-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: photosync:test
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 通知
  notify:
    runs-on: ubuntu-latest
    needs: [quality-check, deploy-prod]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-prod.result }}" == "success" ]; then
            echo "✅ 生产环境部署成功！"
          elif [ "${{ needs.quality-check.result }}" == "success" ]; then
            echo "✅ CI 检查通过，准备部署！"
          else
            echo "❌ CI/CD 流程失败"
          fi

permissions:
  contents: read
  packages: write
