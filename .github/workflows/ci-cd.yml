name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: |
          pnpm install
          cd client && pnpm install
          cd ../server && pnpm install

      - name: Run linting
        run: |
          # 客户端代码检查
          cd client
          pnpm run lint || echo "Linting not configured"
          
          # 服务端代码检查
          cd ../server
          pnpm run lint || echo "Linting not configured"

      - name: Run tests
        run: |
          # 客户端测试
          cd client
          pnpm test -- --coverage --watchAll=false || echo "Tests not configured"
          
          # 服务端测试
          cd ../server
          pnpm test -- --coverage || echo "Tests not configured"

      - name: Build client
        run: |
          cd client
          pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/build/

  # Docker 镜像构建和测试
  docker-build-test:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: photosync:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # 启动容器进行基本测试
          docker run -d --name photosync-test -p 3001:3000 photosync:test
          
          # 等待服务启动
          sleep 30
          
          # 检查健康状态
          curl -f http://localhost:3001/api/health || exit 1
          
          # 清理
          docker stop photosync-test
          docker rm photosync-test

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [quality-check, docker-build-test]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push dev image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }}
          labels: |
            org.opencontainers.image.title=PhotoSync Dev
            org.opencontainers.image.description=PhotoSync 开发环境镜像
            org.opencontainers.image.version=dev
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Deploy to development
        run: |
          echo "🚀 部署到开发环境"
          echo "📦 镜像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }}"
          # 这里可以添加实际的部署逻辑，比如：
          # - 更新 Kubernetes 部署
          # - 通知部署系统
          # - 触发其他部署流程

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [quality-check, docker-build-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push prod image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=PhotoSync
            org.opencontainers.image.description=PhotoSync 生产环境镜像
            org.opencontainers.image.version=latest
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Deploy to production
        run: |
          echo "🚀 部署到生产环境"
          echo "📦 镜像: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # 这里可以添加实际的部署逻辑

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: photosync:test
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 通知
  notify:
    runs-on: ubuntu-latest
    needs: [quality-check, docker-build-test, deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-prod.result }}" == "success" ]; then
            echo "✅ 生产环境部署成功！"
          elif [ "${{ needs.deploy-dev.result }}" == "success" ]; then
            echo "✅ 开发环境部署成功！"
          elif [ "${{ needs.quality-check.result }}" == "success" && "${{ needs.docker-build-test.result }}" == "success" ]; then
            echo "✅ CI 检查通过，准备部署！"
          else
            echo "❌ CI/CD 流程失败"
          fi
