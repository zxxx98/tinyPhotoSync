name: Docker Build and Push

on:
  push:
    tags:
      - 'v*'  # 当推送以 'v' 开头的标签时触发
  workflow_dispatch:  # 允许手动触发
    inputs:
      tag:
        description: '版本标签 (例如: v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  REGISTRY: ghcr.io  # GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            # 从标签中提取版本号，例如 v1.0.0 -> 1.0.0
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=${VERSION#v}  # 移除 'v' 前缀
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.title=PhotoSync
            org.opencontainers.image.description=自托管的照片同步应用
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: PhotoSync ${{ steps.version.outputs.version }}
          body: |
            ## PhotoSync ${{ steps.version.outputs.version }}
            
            ### Docker 镜像
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ```
            
            ### 运行容器
            ```bash
            docker run -d \
              --name photosync \
              -p 8080:3000 \
              -v photosync-storage:/app/storage \
              -v photosync-data:/app/data \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ```
            
            ### 变更日志
            - 查看 [提交历史](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}) 了解详细变更
          draft: false
          prerelease: false

      - name: Update package.json version
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          # 更新根目录的 package.json 版本
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          
          # 更新客户端 package.json 版本
          cd client
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          
          # 更新服务端 package.json 版本
          cd ../server
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          
          # 提交版本更新
          cd ..
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json client/package.json server/package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Docker 镜像构建和推送成功！"
            echo "📦 镜像地址: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          else
            echo "❌ Docker 镜像构建失败"
          fi
